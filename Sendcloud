# -*- coding: utf-8 -*-
import requests
import json
from datetime import datetime, timedelta
from openpyxl import Workbook
from openpyxl.styles import Font
import os
import platform
import subprocess
from woocommerce import API
import sys
import logging
from typing import List, Dict, Tuple, Optional

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

class Config:
    # WooCommerce credentials
    STORE_URL = "https://www.despelvogel.com"
    CONSUMER_KEY = "Placeholder"
    CONSUMER_SECRET = "Placeholder"
    PREORDER_CATEGORY_ID = 18
    
    # Sendcloud credentials
    SENDCLOUD_PUBLIC = "placeholder"
    SENDCLOUD_SECRET = "placeholder"
    SENDCLOUD_INTEGRATION_ID = 209957
    
    # Customs information
    DEFAULT_HS_CODE = "95049090"
    DEFAULT_ORIGIN_COUNTRY = "CN"
    
    # File paths
    XLSX_FILE_PATH = 'open_orders_filtered.xlsx'
    DAYS_TO_FETCH = 5
    ITEMS_PER_PAGE = 100
    MIN_WEIGHT = 0.001

# Initialize APIs
wcapi = API(
    url=Config.STORE_URL,
    consumer_key=Config.CONSUMER_KEY,
    consumer_secret=Config.CONSUMER_SECRET,
    version="wc/v3",
    timeout=30
)

def fetch_processing_orders() -> List[Dict]:
    """Fetch processing orders from the last N days."""
    try:
        date_cutoff = (datetime.now() - timedelta(days=Config.DAYS_TO_FETCH)).isoformat()
        all_orders = []
        page = 1
        
        logger.info("Fetching processing orders...")
        
        while True:
            response = wcapi.get("orders", params={
                'after': date_cutoff,
                'status': 'processing',
                'per_page': Config.ITEMS_PER_PAGE,
                'page': page
            })
            
            if response.status_code != 200:
                raise Exception(f"API request failed with status {response.status_code}")
                
            orders = response.json()
            if not orders:
                break
                
            all_orders.extend(orders)
            page += 1
            
        logger.info(f"Fetched {len(all_orders)} processing orders")
        return all_orders
        
    except Exception as e:
        logger.error(f"Error fetching orders: {e}")
        raise

def fetch_product_details(product_ids: List[int]) -> Dict[int, Dict]:
    """Fetch details for multiple products in batches."""
    try:
        product_details = {}
        if not product_ids:
            return product_details
            
        logger.info(f"Fetching details for {len(product_ids)} products...")
        
        # Process in batches
        for i in range(0, len(product_ids), Config.ITEMS_PER_PAGE):
            batch = product_ids[i:i + Config.ITEMS_PER_PAGE]
            response = wcapi.get("products", params={
                'include': ','.join(map(str, batch)),
                'per_page': len(batch)
            })
            
            if response.status_code != 200:
                raise Exception(f"Product API request failed with status {response.status_code}")
                
            for product in response.json():
                product_details[product['id']] = product
                
        return product_details
        
    except Exception as e:
        logger.error(f"Error fetching product details: {e}")
        raise

def is_gift_coupon(product: Dict) -> bool:
    """Check if product is a gift coupon."""
    categories = [cat['name'].lower() for cat in product.get('categories', [])]
    return any("gift" in c or "coupon" in c for c in categories)

def filter_orders(orders: List[Dict], product_details: Dict[int, Dict]) -> List[Tuple]:
    """Filter out orders containing pre-order or gift items."""
    filtered_orders = []
    
    for order in orders:
        exclude = False
        order_lines = []
        customer_note = order.get('customer_note', '')
        
        for item in order.get('line_items', []):
            product = product_details.get(item.get('product_id'), {})
            if not product:
                continue
                
            # Check for pre-order items
            if Config.PREORDER_CATEGORY_ID in [cat['id'] for cat in product.get('categories', [])]:
                exclude = True
                
            # Check for gift coupons
            if is_gift_coupon(product):
                exclude = True
                
            order_lines.append((
                item.get('name'),
                item.get('quantity'),
                item.get('product_id')
            ))
            
        if not exclude:
            filtered_orders.append((order, order_lines, customer_note))
            
    logger.info(f"Filtered down to {len(filtered_orders)} orders")
    return filtered_orders

def prepare_excel(orders: List[Tuple]) -> Workbook:
    """Generate Excel workbook with order data."""
    try:
        workbook = Workbook()
        sheet = workbook.active
        sheet.title = "Open Orders"
        
        # Header row with bold font
        headers = ['Naam', 'Order Number', 'Product', 'Aantal', 'Klant Opmerking']
        sheet.append(headers)
        
        for cell in sheet[1]:
            cell.font = Font(bold=True)
        
        # Add order data
        for order, lines, customer_note in orders:
            name = f"{order['billing']['first_name']} {order['billing']['last_name']}"
            order_number = order['number']
            first = True
            
            for product_name, qty, _ in lines:
                row = [
                    name if first else "",
                    order_number if first else "",
                    product_name,
                    qty,
                    customer_note if first else ""
                ]
                sheet.append(row)
                first = False
                
            sheet.append(["", "", "", "", ""])  # Add empty row between orders
        
        # Auto-size columns
        for col in sheet.columns:
            max_len = max(len(str(cell.value)) if cell.value else 0 for cell in col)
            sheet.column_dimensions[col[0].column_letter].width = max_len + 2
            
        return workbook
        
    except Exception as e:
        logger.error(f"Error preparing Excel: {e}")
        raise

def save_and_open_excel(workbook: Workbook, file_path: str):
    """Save workbook and attempt to open it."""
    try:
        if os.path.exists(file_path):
            os.remove(file_path)
            
        workbook.save(file_path)
        logger.info(f"Excel saved to: {file_path}")
        
        # Open the file
        if platform.system() == "Windows":
            os.startfile(file_path)
        elif platform.system() == "Darwin":
            subprocess.call(["open", file_path])
        else:
            subprocess.call(["xdg-open", file_path])
            
    except Exception as e:
        logger.error(f"Could not open Excel file: {e}")

def fetch_shipment_data(order_number: str) -> Optional[Dict]:
    """Fetch shipment data from Sendcloud."""
    try:
        url = f"https://panel.sendcloud.sc/api/v2/integrations/{Config.SENDCLOUD_INTEGRATION_ID}/shipments"
        auth = (Config.SENDCLOUD_PUBLIC, Config.SENDCLOUD_SECRET)
        
        for key in ["order_number", "external_order_id", "external_shipment_id"]:
            logger.info(f"Searching shipment with {key}={order_number}")
            response = requests.get(url, auth=auth, params={key: str(order_number)}, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                if data.get("results"):
                    logger.info(f"Found shipment using {key}")
                    return data["results"][0]
            else:
                logger.warning(f"Request failed for {key}: {response.status_code}")
                
        logger.warning(f"No shipment found for order {order_number}")
        return None
        
    except Exception as e:
        logger.error(f"Error fetching shipment data: {e}")
        return None

def prepare_parcel_payload(shipment: Dict, order_meta: Dict) -> Optional[Dict]:
    """Prepare the parcel payload with correct service point handling."""
    try:
        is_sp = shipment.get('to_service_point') is not None
        
        # Base payload
        payload = {
            "parcels": [{
                "request_label": True,
                "apply_shipping_rules": True,
                "order_number": shipment["order_number"],
                "name": shipment["name"],
                "company_name": shipment.get("company_name", ""),
                "email": shipment["email"],
                "shipment": {"id": shipment["shipping_method"]},  # Use SendCloud's shipping method
                "shipment_uuid": shipment["shipment_uuid"],
                "length": "30",
                "width": "20",
                "height": "10",
                "weight": str(max(float(shipment.get("weight", 0.5)), Config.MIN_WEIGHT)),
                "customs_shipment_type": 1,
                "customs_invoice_nr": shipment["order_number"],
                "parcel_items": []
            }]
        }

        # Handle service point deliveries
        if is_sp:
            # Fallback to customer address if service point data is incomplete
            service_point_city = shipment.get("service_point_city") or order_meta['shipping']['city']
            service_point_postal_code = shipment.get("service_point_postal_code") or order_meta['shipping']['postcode']
            service_point_address = shipment.get("service_point_address") or f"Service Point {shipment['to_service_point']}"
            
            if not service_point_city or not service_point_postal_code:
                logger.error(f"Incomplete service point data for order {shipment['order_number']}")
                return None

            payload["parcels"][0].update({
                "to_service_point": shipment["to_service_point"],
                "to_post_number": shipment.get("to_post_number", ""),
                "address": service_point_address,
                "house_number": "0",
                "postal_code": service_point_postal_code,
                "city": service_point_city,
                "country": shipment.get("service_point_country", "NL"),
                "is_service_point": True
            })
        else:
            # Regular delivery
            payload["parcels"][0].update({
                "address": shipment["address"],
                "house_number": shipment["house_number"],
                "postal_code": shipment["postal_code"],
                "city": shipment["city"],
                "country": shipment["country"]
            })

        # Add phone number
        if shipment.get("telephone"):
            payload["parcels"][0]["telephone"] = shipment["telephone"]

        # Add parcel items
        for item in shipment.get("parcel_items", []):
            if all(k in item for k in ["description", "quantity"]):
                payload["parcels"][0]["parcel_items"].append({
                    "description": item["description"],
                    "quantity": item["quantity"],
                    "weight": str(max(float(item.get("weight", 0.1)), Config.MIN_WEIGHT)),
                    "value": item.get("value", "0.00"),
                    "hs_code": Config.DEFAULT_HS_CODE,
                    "origin_country": Config.DEFAULT_ORIGIN_COUNTRY,
                    "sku": item.get("sku", ""),
                    "product_id": item.get("product_id", "")
                })

        logger.debug(f"Final payload: {json.dumps(payload, indent=2)}")
        return payload

    except Exception as e:
        logger.error(f"Error preparing payload: {e}")
        return None

def fulfill_order_with_label(shipment: Dict, order_meta: Dict) -> Optional[str]:
    """Create parcel and request label in Sendcloud."""
    try:
        url = "https://panel.sendcloud.sc/api/v2/parcels"
        auth = (Config.SENDCLOUD_PUBLIC, Config.SENDCLOUD_SECRET)
        
        # Prepare the payload with validation
        parcel_payload = prepare_parcel_payload(shipment, order_meta)
        if not parcel_payload:
            logger.error("Failed to prepare valid payload")
            return None

        logger.info(f"Creating label for order {shipment['order_number']}")
        response = requests.post(
            url,
            auth=auth,
            json=parcel_payload,
            headers={"Content-Type": "application/json"},
            timeout=30
        )

        if response.status_code == 200:
            parcel_data = response.json()["parcels"][0]
            label_url = parcel_data.get("label", {}).get("normal_printer", [None])[0]
            
            if label_url:
                logger.info(f"✅ Label created for order {shipment['order_number']}")
                logger.info(f"🔗 Label URL: {label_url}")
                return label_url
            else:
                logger.warning("⚠️ Parcel created but no label URL returned")
        else:
            logger.error(f"❌ Failed to create parcel: {response.status_code}")
            logger.error(f"Error details: {response.text}")
            logger.error(f"Payload sent: {parcel_payload}")
        
        return None
        
    except Exception as e:
        logger.error(f"🔥 Unexpected error during fulfillment: {e}")
        return None

def main():
    try:
        # Fetch and process orders
        orders = fetch_processing_orders()
        product_ids = list({item['product_id'] for order in orders for item in order.get('line_items', [])})
        product_details = fetch_product_details(product_ids)
        filtered_orders = filter_orders(orders, product_details)
        
        # Generate Excel report
        workbook = prepare_excel(filtered_orders)
        save_and_open_excel(workbook, Config.XLSX_FILE_PATH)
        
        # Process shipments
        logger.info("\nStarting fulfillment of shipments via Sendcloud...\n")
        successful_fulfillments = 0
        
        for order, _, _ in filtered_orders:
            order_number = str(order["number"])
            shipment = fetch_shipment_data(order_number)
            
            if shipment:
                # Add phone number from WooCommerce order to shipment data
                shipment["telephone"] = order.get("billing", {}).get("phone", "")
                
                label_url = fulfill_order_with_label(shipment, order)
                if label_url:
                    successful_fulfillments += 1
        
        logger.info(f"\nFulfillment completed. Successfully processed {successful_fulfillments}/{len(filtered_orders)} orders")
        logger.info("Script completed successfully")
        
    except Exception as e:
        logger.error(f"Script failed: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
