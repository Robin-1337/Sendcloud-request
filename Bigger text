import os
import io
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.image import AsyncImage
from kivy.uix.spinner import Spinner
from kivy.uix.popup import Popup
from kivy.uix.progressbar import ProgressBar
from kivy.clock import Clock, mainthread
from kivy.metrics import dp
from kivy.core.window import Window
from kivy.utils import get_color_from_hex
import requests
from woocommerce import API

# Auto-install dependencies
def install_deps():
    required = ['requests', 'woocommerce', 'openpyxl']
    for package in required:
        try:
            __import__(package)
        except ImportError:
            os.system(f'pip install --user {package}')

install_deps()

# WooCommerce Setup
WC_API = API(
    url="https://www.despelvogel.com",
    consumer_key="ck_523243facf852cb82516b54b3fcaa9d36a363570",
    consumer_secret="cs_199e4a3f5e00bbf11fde95826e46ec972177a6b0",
    version="wc/v3",
    timeout=30
)

class FinalStockEditor(App):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.products = []
        self.current_page = 1
        self.total_pages = 1
        self.current_index = 0
        self.loading = False
        self.current_category = None
        self.reserved_stock = {}
        Window.clearcolor = get_color_from_hex('#f5f5f5')

    def build(self):
        # Main layout (keeping original dimensions)
        self.layout = BoxLayout(
            orientation='vertical',
            spacing=dp(10),
            padding=dp(15),
        )
        
        # --- Header --- (unchanged)
        header = BoxLayout(size_hint=(1, None), height=dp(50))
        self.category_spinner = Spinner(
            text='Select Product Category',
            size_hint=(0.8, None),
            height=dp(45),
            font_size=dp(16),
            background_color=get_color_from_hex('#4a7bd3'),
            color=(1, 1, 1, 1)
        )
        header.add_widget(self.category_spinner)
        self.layout.add_widget(header)
        
        # --- Product Display --- (unchanged)
        self.product_image = AsyncImage(
            size_hint=(1, None),
            height=dp(200),
            fit_mode='contain'
        )
        self.layout.add_widget(self.product_image)
        
        # --- Stock Display ---
        stock_display = BoxLayout(
            size_hint=(1, None),
            height=dp(120),
            orientation='vertical',
            spacing=dp(5),
        )
        
        # ONLY CHANGED THIS LABEL (product title)
        self.product_label = Label(
            text="[size=24][b]Select a category[/b][/size]",  # Changed from 18 to 24
            size_hint=(1, None),
            height=dp(50),  # Slightly increased height
            halign='center',
            valign='middle',
            markup=True,
            color=(0, 0, 0, 1)
        )
        stock_display.add_widget(self.product_label)
        
        # Current Stock (unchanged)
        self.stock_display = Label(
            text="[size=36][b]Stock: 0[/b][/size]",
            size_hint=(1, None),
            height=dp(50),
            halign='center',
            markup=True,
            color=get_color_from_hex('#1976D2')
        )
        stock_display.add_widget(self.stock_display)
        
        # Reserved Stock (unchanged)
        self.reserved_display = Label(
            text="[size=24][b]Reserved: 0[/b][/size]",
            size_hint=(1, None),
            height=dp(40),
            halign='center',
            markup=True,
            color=get_color_from_hex('#FF9800')
        )
        stock_display.add_widget(self.reserved_display)
        
        self.layout.add_widget(stock_display)
        
        # --- Rest of the code remains EXACTLY THE SAME ---
        # [Previous button, navigation, and all other code unchanged]
        # ...
        
        return self.layout

    # ALL OTHER METHODS REMAIN UNCHANGED
    def load_reserved_stock(self):
        """Load reserved stock data from Excel file using openpyxl"""
        try:
            from openpyxl import load_workbook
            url = "https://www.despelvogel.com/wp-content/uploads/reserved-stock/reservedstock.xlsx"
            response = requests.get(url)
            excel_data = io.BytesIO(response.content)
            wb = load_workbook(excel_data)
            sheet = wb.active
            
            self.reserved_stock = {}
            for row in sheet.iter_rows(min_row=2, values_only=True):  # Skip header
                if row[0] and row[1]:  # Check if both cells have values
                    self.reserved_stock[int(row[0])] = int(row[1])
            
            self.status_bar.text = "Reserved stock loaded"
        except Exception as e:
            self.show_error(f"Failed to load reserved stock: {str(e)}")
            self.reserved_stock = {}

    def on_category_selected(self, instance, category):
        if "ID:" not in category:
            return
        self.current_category = category.split("ID:")[1].strip(")")
        self.current_page = 1
        self.load_products()

    def load_categories(self):
        def _load():
            try:
                cats = WC_API.get("products/categories?per_page=100").json()
                cat_names = [f"{c['name']} (ID:{c['id']})" for c in cats]
                self.update_spinner(cat_names)
            except Exception as e:
                self.show_error(f"Category load failed: {str(e)}")
        
        Clock.schedule_once(lambda dt: self.run_in_thread(_load))

    @mainthread
    def update_spinner(self, items):
        self.category_spinner.values = items
        self.status_bar.text = "Select a category"

    def load_products(self):
        if self.loading or not self.current_category:
            return
            
        self.loading = True
        self.progress.value = 30
        self.status_bar.text = "Loading products..."
        
        def _load():
            try:
                response = WC_API.get(
                    f"products?category={self.current_category}"
                    f"&per_page=20&page={self.current_page}"
                )
                
                total_pages = int(response.headers.get('X-WP-TotalPages', 1))
                products = response.json()
                
                self.update_products(products, total_pages)
            except Exception as e:
                self.show_error(f"Product load failed: {str(e)}")
            finally:
                self.loading = False
                self.progress.value = 0
        
        Clock.schedule_once(lambda dt: self.run_in_thread(_load))

    @mainthread
    def update_products(self, products, total_pages):
        self.products = products
        self.total_pages = total_pages
        self.current_index = 0
        self.page_label.text = f"Page {self.current_page}/{self.total_pages}"
        
        if products:
            self.show_current_product()
            self.status_bar.text = f"Loaded {len(products)} products"
        else:
            self.product_label.text = "[size=24][b]No products found[/b][/size]"  # Updated size here too
            self.stock_display.text = "[size=36][b]Stock: -[/b][/size]"
            self.reserved_display.text = "[size=24][b]Reserved: -[/b][/size]"
            self.product_image.source = ''
            self.status_bar.text = "No products in this category"

    def show_current_product(self):
        product = self.products[self.current_index]
        self.product_label.text = f"[size=24][b]{product['name']}[/b][/size]"  # Consistent 24 size
        self.stock_display.text = f"[size=36][b]Stock: {product.get('stock_quantity', 0)}[/b][/size]"
        
        # Show reserved stock if available
        reserved_qty = self.reserved_stock.get(product['id'], 0)
        self.reserved_display.text = f"[size=24][b]Reserved: {reserved_qty}[/b][/size]"
        
        self.update_product_image(product['images'][0]['src'] if product.get('images') else None)

    @mainthread
    def update_product_image(self, url):
        if url:
            self.product_image.source = url
        else:
            self.product_image.source = 'https://via.placeholder.com/400x300?text=No+Image'

    def update_stock(self, change):
        if not self.products or self.loading:
            return
            
        product = self.products[self.current_index]
        new_stock = max(0, int(product.get('stock_quantity', 0)) + change)
        
        def _update():
            try:
                WC_API.put(f"products/{product['id']}", data={"stock_quantity": new_stock})
                self.update_stock_display(new_stock)
                self.status_bar.text = f"Stock updated to {new_stock}"
            except Exception as e:
                self.show_error(f"Update failed: {str(e)}")
        
        Clock.schedule_once(lambda dt: self.run_in_thread(_update))

    @mainthread
    def update_stock_display(self, new_stock):
        self.products[self.current_index]['stock_quantity'] = new_stock
        self.stock_display.text = f"[size=36][b]Stock: {new_stock}[/b][/size]"

    def change_product(self, direction):
        if not self.products or self.loading:
            return
            
        new_index = self.current_index + direction
        if 0 <= new_index < len(self.products):
            self.current_index = new_index
            self.show_current_product()
        elif direction > 0 and self.current_page < self.total_pages:
            self.current_page += 1
            self.load_products()
        elif direction < 0 and self.current_page > 1:
            self.current_page -= 1
            self.load_products()

    def change_page(self, direction):
        new_page = self.current_page + direction
        if 1 <= new_page <= self.total_pages:
            self.current_page = new_page
            self.load_products()

    def run_in_thread(self, func):
        import threading
        threading.Thread(target=func).start()

    @mainthread
    def show_error(self, message):
        Popup(
            title='Error',
            content=Label(text=message),
            size_hint=(0.8, 0.4)
        ).open()

if __name__ == '__main__':
    FinalStockEditor().run()
