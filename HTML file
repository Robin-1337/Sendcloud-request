<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Order System - Despelvogel</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            padding: 20px;
            max-width: 1200px;
            margin: 0 auto;
        }
        .search-container {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }
        #searchInput {
            padding: 10px;
            flex-grow: 1;
            font-size: 16px;
        }
        #searchButton {
            padding: 10px 20px;
            background-color: #4CAF50;
            color: white;
            border: none;
            cursor: pointer;
            font-size: 16px;
        }
        #searchButton:hover {
            background-color: #45a049;
        }
        .product-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        .product-card {
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 15px;
            position: relative;
        }
        .product-image {
            width: 100%;
            height: 200px;
            object-fit: contain;
            margin-bottom: 10px;
        }
        .product-title {
            font-size: 16px;
            margin: 5px 0;
            height: 40px;
            overflow: hidden;
        }
        .product-price {
            font-weight: bold;
            color: #2a6496;
            margin: 5px 0;
        }
        .product-stock {
            margin: 5px 0;
            font-size: 14px;
        }
        .in-stock {
            color: #4CAF50;
        }
        .out-of-stock {
            color: #F44336;
        }
        .loading {
            text-align: center;
            padding: 20px;
            display: none;
        }
        .error {
            color: red;
            text-align: center;
            padding: 20px;
            display: none;
        }
        .quantity-controls {
            display: flex;
            align-items: center;
            margin: 10px 0;
        }
        .quantity-input {
            width: 50px;
            text-align: center;
            padding: 5px;
            margin: 0 5px;
        }
        .quantity-btn {
            padding: 5px 10px;
            background-color: #f0f0f0;
            border: 1px solid #ddd;
            cursor: pointer;
        }
        .add-to-cart {
            width: 100%;
            padding: 8px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-top: 5px;
        }
        .add-to-cart:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }
        .cart-container {
            margin-top: 30px;
            border-top: 2px solid #eee;
            padding-top: 20px;
        }
        .cart-item {
            display: flex;
            justify-content: space-between;
            padding: 10px 0;
            border-bottom: 1px solid #eee;
        }
        .cart-total {
            font-weight: bold;
            font-size: 18px;
            text-align: right;
            margin-top: 15px;
        }
        .stock-badge {
            position: absolute;
            top: 10px;
            right: 10px;
            padding: 3px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: bold;
            color: white;
        }
        .in-stock-badge {
            background-color: #4CAF50;
        }
        .out-of-stock-badge {
            background-color: #F44336;
        }
        .low-stock-badge {
            background-color: #FF9800;
        }
    </style>
</head>
<body>
    <h1>Product Order System</h1>
    <div class="search-container">
        <input type="text" id="searchInput" placeholder="Enter product name...">
        <button id="searchButton">Search Products</button>
    </div>
    
    <div id="loading" class="loading">Loading products...</div>
    <div id="error" class="error"></div>
    
    <div id="productGrid" class="product-grid"></div>
    
    <div class="cart-container">
        <h2>Your Order</h2>
        <div id="cartItems"></div>
        <div id="cartTotal" class="cart-total">Total: €0.00</div>
    </div>

    <script>
        // Configuration
        const config = {
            store_url: "https://www.despelvogel.com",
            consumer_key: "ck_523243facf852cb82516b54b3fcaa9d36a363570",
            consumer_secret: "cs_199e4a3f5e00bbf11fde95826e46ec972177a6b0",
            low_stock_threshold: 3
        };

        // State
        let cart = [];
        
        // DOM elements
        const searchInput = document.getElementById('searchInput');
        const searchButton = document.getElementById('searchButton');
        const productGrid = document.getElementById('productGrid');
        const loadingElement = document.getElementById('loading');
        const errorElement = document.getElementById('error');
        const cartItemsElement = document.getElementById('cartItems');
        const cartTotalElement = document.getElementById('cartTotal');

        // Helper functions
        function base64Encode(str) {
            return btoa(str);
        }
        
        function formatPrice(price) {
            return `€${parseFloat(price).toFixed(2)}`;
        }
        
        function getStockStatus(product) {
            if (product.stock_status === 'outofstock') {
                return { 
                    class: 'out-of-stock', 
                    text: 'Out of stock',
                    badgeClass: 'out-of-stock-badge'
                };
            }
            
            if (product.stock_quantity <= config.low_stock_threshold) {
                return { 
                    class: 'low-stock', 
                    text: `Low stock (${product.stock_quantity} left)`,
                    badgeClass: 'low-stock-badge'
                };
            }
            
            return { 
                class: 'in-stock', 
                text: `In stock (${product.stock_quantity} available)`,
                badgeClass: 'in-stock-badge'
            };
        }

        // API Functions
        async function searchProducts(searchTerm) {
            loadingElement.style.display = 'block';
            errorElement.style.display = 'none';
            productGrid.innerHTML = '';
            
            try {
                const authString = base64Encode(`${config.consumer_key}:${config.consumer_secret}`);
                const response = await fetch(
                    `${config.store_url}/wp-json/wc/v3/products?search=${encodeURIComponent(searchTerm)}&per_page=20`,
                    {
                        headers: {
                            'Authorization': `Basic ${authString}`
                        }
                    }
                );

                if (!response.ok) {
                    throw new Error(`API request failed with status ${response.status}`);
                }

                const products = await response.json();
                
                if (products.length === 0) {
                    errorElement.textContent = 'No products found matching your search';
                    errorElement.style.display = 'block';
                    return;
                }
                
                displayProducts(products);
                
            } catch (error) {
                console.error('Error searching products:', error);
                errorElement.textContent = `Error: ${error.message}`;
                errorElement.style.display = 'block';
            } finally {
                loadingElement.style.display = 'none';
            }
        }
        
        async function updateProductStock(productId, quantity) {
            try {
                const authString = base64Encode(`${config.consumer_key}:${config.consumer_secret}`);
                
                // First get current stock
                const getResponse = await fetch(
                    `${config.store_url}/wp-json/wc/v3/products/${productId}`,
                    {
                        headers: {
                            'Authorization': `Basic ${authString}`
                        }
                    }
                );
                
                if (!getResponse.ok) {
                    throw new Error('Failed to get current stock');
                }
                
                const product = await getResponse.json();
                const currentStock = product.stock_quantity;
                const newStock = currentStock - quantity;
                
                // Update stock
                const updateResponse = await fetch(
                    `${config.store_url}/wp-json/wc/v3/products/${productId}`,
                    {
                        method: 'PUT',
                        headers: {
                            'Authorization': `Basic ${authString}`,
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            stock_quantity: newStock,
                            stock_status: newStock > 0 ? 'instock' : 'outofstock'
                        })
                    }
                );
                
                if (!updateResponse.ok) {
                    throw new Error('Failed to update stock');
                }
                
                return await updateResponse.json();
                
            } catch (error) {
                console.error('Error updating stock:', error);
                throw error;
            }
        }

        // Display Functions
        function displayProducts(products) {
            productGrid.innerHTML = '';
            
            products.forEach(product => {
                const productCard = document.createElement('div');
                productCard.className = 'product-card';
                
                const stockStatus = getStockStatus(product);
                const imageUrl = product.images && product.images[0] ? 
                    product.images[0].src : 
                    'https://via.placeholder.com/250';
                
                productCard.innerHTML = `
                    <span class="stock-badge ${stockStatus.badgeClass}">${stockStatus.text}</span>
                    <img src="${imageUrl}" alt="${product.name}" class="product-image">
                    <h3 class="product-title">${product.name}</h3>
                    <div class="product-price">${formatPrice(product.price)}</div>
                    <div class="product-stock ${stockStatus.class}">${stockStatus.text}</div>
                    
                    <div class="quantity-controls">
                        <button class="quantity-btn minus" data-id="${product.id}">-</button>
                        <input type="number" class="quantity-input" data-id="${product.id}" value="1" min="1" 
                            max="${product.stock_quantity || 10}">
                        <button class="quantity-btn plus" data-id="${product.id}">+</button>
                    </div>
                    
                    <button class="add-to-cart" data-id="${product.id}" 
                        ${product.stock_status !== 'instock' ? 'disabled' : ''}>
                        Add to Order
                    </button>
                `;
                
                productGrid.appendChild(productCard);
            });
            
            // Add event listeners
            document.querySelectorAll('.quantity-btn.minus').forEach(btn => {
                btn.addEventListener('click', function() {
                    const input = this.nextElementSibling;
                    if (input.value > 1) input.value--;
                });
            });
            
            document.querySelectorAll('.quantity-btn.plus').forEach(btn => {
                btn.addEventListener('click', function() {
                    const input = this.previousElementSibling;
                    input.value++;
                });
            });
            
            document.querySelectorAll('.add-to-cart').forEach(btn => {
                btn.addEventListener('click', async function() {
                    const productId = parseInt(this.dataset.id);
                    const quantityInput = this.previousElementSibling.querySelector('.quantity-input');
                    const quantity = parseInt(quantityInput.value);
                    
                    await addToCart(productId, quantity);
                });
            });
        }
        
        function updateCartDisplay() {
            cartItemsElement.innerHTML = '';
            
            if (cart.length === 0) {
                cartItemsElement.innerHTML = '<p>Your order is empty</p>';
                cartTotalElement.textContent = 'Total: €0.00';
                return;
            }
            
            cart.forEach(item => {
                const cartItemElement = document.createElement('div');
                cartItemElement.className = 'cart-item';
                cartItemElement.innerHTML = `
                    <span>${item.name} (${item.quantity}x)</span>
                    <span>${formatPrice(item.price * item.quantity)}</span>
                `;
                cartItemsElement.appendChild(cartItemElement);
            });
            
            const total = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
            cartTotalElement.textContent = `Total: ${formatPrice(total)}`;
        }

        // Cart Functions
        async function addToCart(productId, quantity) {
            try {
                loadingElement.style.display = 'block';
                
                // Find the product in the displayed grid
                const productCard = document.querySelector(`.product-card[data-id="${productId}"]`);
                if (!productCard) throw new Error('Product not found');
                
                // Get product details
                const productName = productCard.querySelector('.product-title').textContent;
                const productPrice = parseFloat(productCard.querySelector('.product-price').textContent.replace('€', ''));
                
                // Update stock via API
                const updatedProduct = await updateProductStock(productId, quantity);
                
                // Update local display
                const stockStatus = getStockStatus(updatedProduct);
                productCard.querySelector('.product-stock').className = `product-stock ${stockStatus.class}`;
                productCard.querySelector('.product-stock').textContent = stockStatus.text;
                productCard.querySelector('.stock-badge').className = `stock-badge ${stockStatus.badgeClass}`;
                productCard.querySelector('.stock-badge').textContent = stockStatus.text;
                
                // Disable add button if out of stock
                if (updatedProduct.stock_status === 'outofstock') {
                    productCard.querySelector('.add-to-cart').disabled = true;
                }
                
                // Update quantity input max value
                productCard.querySelector('.quantity-input').max = updatedProduct.stock_quantity || 0;
                
                // Add to cart
                const existingItem = cart.find(item => item.id === productId);
                if (existingItem) {
                    existingItem.quantity += quantity;
                } else {
                    cart.push({
                        id: productId,
                        name: productName,
                        price: productPrice,
                        quantity: quantity
                    });
                }
                
                updateCartDisplay();
                
            } catch (error) {
                console.error('Error adding to cart:', error);
                errorElement.textContent = `Error: ${error.message}`;
                errorElement.style.display = 'block';
            } finally {
                loadingElement.style.display = 'none';
            }
        }

        // Event Listeners
        searchButton.addEventListener('click', () => {
            const searchTerm = searchInput.value.trim();
            if (searchTerm) {
                searchProducts(searchTerm);
            }
        });

        searchInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                const searchTerm = searchInput.value.trim();
                if (searchTerm) {
                    searchProducts(searchTerm);
                }
            }
        });

        // Initialize
        updateCartDisplay();
    </script>
</body>
</html>
